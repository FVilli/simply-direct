//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id         Int       @id() @default(autoincrement())
  uid        String?   @unique()
  name       String    @unique()
  owned_by   Int?
  created_at DateTime  @default(now()) @db.Timestamptz(3)
  created_by Int?
  updated_at DateTime  @updatedAt() @db.Timestamptz(3)
  updated_by Int?
  deleted_at DateTime? @db.Timestamptz(3)
  deleted_by Int?
  email      String?   @unique()
  phash      String?
  role       String?
  disabled   Boolean   @default(false)
  clients    Client[]
}

model Client {
  id         Int       @id() @default(autoincrement())
  uid        String?   @unique()
  name       String    @unique()
  owned_by   Int?
  created_at DateTime  @default(now()) @db.Timestamptz(3)
  created_by Int?
  updated_at DateTime  @updatedAt() @db.Timestamptz(3)
  updated_by Int?
  deleted_at DateTime? @db.Timestamptz(3)
  deleted_by Int?
  agent      String
  token      String?
  sessions   Int       @default(0)
  user_id    Int?
  user       User?     @relation(fields: [user_id], references: [id])
}

model Company {
  id                  Int       @id() @default(autoincrement())
  uid                 String?   @unique()
  name                String    @unique()
  owned_by            Int?
  created_at          DateTime  @default(now()) @db.Timestamptz(3)
  created_by          Int?
  updated_at          DateTime  @updatedAt() @db.Timestamptz(3)
  updated_by          Int?
  deleted_at          DateTime? @db.Timestamptz(3)
  deleted_by          Int?
  legal_name          String?   @unique()
  vat_number          String?   @unique()
  registration_number String?   @unique()
  sites               Site[]
}

model Site {
  id          Int         @id() @default(autoincrement())
  uid         String?     @unique()
  name        String      @unique()
  owned_by    Int?
  created_at  DateTime    @default(now()) @db.Timestamptz(3)
  created_by  Int?
  updated_at  DateTime    @updatedAt() @db.Timestamptz(3)
  updated_by  Int?
  deleted_at  DateTime?   @db.Timestamptz(3)
  deleted_by  Int?
  address     String?
  city        String?
  postal_code String?
  state       String?
  country     String?
  phone       String?
  is_active   Boolean     @default(true)
  latitude    Float?
  longitude   Float?
  company_id  Int?
  company     Company?    @relation(fields: [company_id], references: [id])
  appliances  Appliance[]
}

model Appliance {
  id               Int       @id() @default(autoincrement())
  uid              String?   @unique()
  name             String    @unique()
  owned_by         Int?
  created_at       DateTime  @default(now()) @db.Timestamptz(3)
  created_by       Int?
  updated_at       DateTime  @updatedAt() @db.Timestamptz(3)
  updated_by       Int?
  deleted_at       DateTime? @db.Timestamptz(3)
  deleted_by       Int?
  description      String?
  serial_number    String?
  mac_address      String?
  ip_address       String?
  settings_version Int?
  settings         Json?     @db.JsonB()
  site_id          Int?
  site             Site?     @relation(fields: [site_id], references: [id])
  devices          Device[]
}

model SettingsHistory {
  id               Int       @id() @default(autoincrement())
  uid              String?   @unique()
  name             String    @unique()
  owned_by         Int?
  created_at       DateTime  @default(now()) @db.Timestamptz(3)
  created_by       Int?
  updated_at       DateTime  @updatedAt() @db.Timestamptz(3)
  updated_by       Int?
  deleted_at       DateTime? @db.Timestamptz(3)
  deleted_by       Int?
  settings_version Int?
  settings         Json?     @db.JsonB()
}

model Vendor {
  id           Int          @id() @default(autoincrement())
  uid          String?      @unique()
  name         String       @unique()
  owned_by     Int?
  created_at   DateTime     @default(now()) @db.Timestamptz(3)
  created_by   Int?
  updated_at   DateTime     @updatedAt() @db.Timestamptz(3)
  updated_by   Int?
  deleted_at   DateTime?    @db.Timestamptz(3)
  deleted_by   Int?
  description  String?
  device_types DeviceType[]
}

model Category {
  id           Int          @id() @default(autoincrement())
  uid          String?      @unique()
  name         String       @unique()
  owned_by     Int?
  created_at   DateTime     @default(now()) @db.Timestamptz(3)
  created_by   Int?
  updated_at   DateTime     @updatedAt() @db.Timestamptz(3)
  updated_by   Int?
  deleted_at   DateTime?    @db.Timestamptz(3)
  deleted_by   Int?
  description  String?
  parent_id    Int?
  parent       Category?    @relation("hierarchy", fields: [parent_id], references: [id])
  children     Category[]   @relation("hierarchy")
  device_types DeviceType[]
  sensor_types SensorType[]
}

model DeviceType {
  id               Int                   @id() @default(autoincrement())
  uid              String?               @unique()
  name             String                @unique()
  owned_by         Int?
  created_at       DateTime              @default(now()) @db.Timestamptz(3)
  created_by       Int?
  updated_at       DateTime              @updatedAt() @db.Timestamptz(3)
  updated_by       Int?
  deleted_at       DateTime?             @db.Timestamptz(3)
  deleted_by       Int?
  description      String?
  settings_version Int?
  settings         Json?                 @db.JsonB()
  category_id      Int?
  category         Category?             @relation(fields: [category_id], references: [id])
  vendor_id        Int?
  vendor           Vendor?               @relation(fields: [vendor_id], references: [id])
  mappings         DeviceSensorMapping[]
  devices          Device[]
}

model SensorType {
  id               Int                    @id() @default(autoincrement())
  uid              String?                @unique()
  name             String                 @unique()
  owned_by         Int?
  created_at       DateTime               @default(now()) @db.Timestamptz(3)
  created_by       Int?
  updated_at       DateTime               @updatedAt() @db.Timestamptz(3)
  updated_by       Int?
  deleted_at       DateTime?              @db.Timestamptz(3)
  deleted_by       Int?
  description      String?
  settings_version Int?
  settings         Json?                  @db.JsonB()
  category_id      Int?
  category         Category?              @relation(fields: [category_id], references: [id])
  device_mappings  DeviceSensorMapping[]
  measure_mappings SensorMeasureMapping[]
}

model DeviceSensorMapping {
  id             Int        @id() @default(autoincrement())
  device_type_id Int
  device_type    DeviceType @relation(fields: [device_type_id], references: [id])
  sensor_type_id Int
  sensor_type    SensorType @relation(fields: [sensor_type_id], references: [id])
  idx            Int
  channel        String?
  sensors        Sensor[]

  @@unique([idx, device_type_id, sensor_type_id])
}

model Device {
  id               Int        @id() @default(autoincrement())
  uid              String?    @unique()
  name             String     @unique()
  owned_by         Int?
  created_at       DateTime   @default(now()) @db.Timestamptz(3)
  created_by       Int?
  updated_at       DateTime   @updatedAt() @db.Timestamptz(3)
  updated_by       Int?
  deleted_at       DateTime?  @db.Timestamptz(3)
  deleted_by       Int?
  description      String?
  serial_number    String?
  mac_address      String?
  ip_address       String?
  settings_version Int?
  settings         Json?      @db.JsonB()
  additional_info  Json?      @db.JsonB()
  parent_id        Int?
  parent           Device?    @relation("hierarchy", fields: [parent_id], references: [id])
  children         Device[]   @relation("hierarchy")
  device_type_id   Int
  device_type      DeviceType @relation(fields: [device_type_id], references: [id])
  appliance_id     Int
  appliance        Appliance  @relation(fields: [appliance_id], references: [id])
  sensors          Sensor[]
}

model Sensor {
  id               Int                 @id() @default(autoincrement())
  uid              String?             @unique()
  name             String              @unique()
  owned_by         Int?
  created_at       DateTime            @default(now()) @db.Timestamptz(3)
  created_by       Int?
  updated_at       DateTime            @updatedAt() @db.Timestamptz(3)
  updated_by       Int?
  deleted_at       DateTime?           @db.Timestamptz(3)
  deleted_by       Int?
  description      String?
  serial_number    String?
  mac_address      String?
  ip_address       String?
  settings_version Int?
  settings         Json?               @db.JsonB()
  additional_info  Json?               @db.JsonB()
  parent_id        Int?
  parent           Sensor?             @relation("hierarchy", fields: [parent_id], references: [id])
  children         Sensor[]            @relation("hierarchy")
  device_id        Int
  device           Device              @relation(fields: [device_id], references: [id])
  mapping_id       Int
  mapping          DeviceSensorMapping @relation(fields: [mapping_id], references: [id])
}

model MeasureType {
  id          Int                    @id() @default(autoincrement())
  uid         String?                @unique()
  name        String                 @unique()
  owned_by    Int?
  created_at  DateTime               @default(now()) @db.Timestamptz(3)
  created_by  Int?
  updated_at  DateTime               @updatedAt() @db.Timestamptz(3)
  updated_by  Int?
  deleted_at  DateTime?              @db.Timestamptz(3)
  deleted_by  Int?
  description String?
  unit        String?
  value_type  String
  aggregates  MeasureTypeAggregate[]
  mappings    SensorMeasureMapping[]
}

model MeasureTypeAggregate {
  id                            Int                            @id() @default(autoincrement())
  uid                           String?                        @unique()
  name                          String                         @unique()
  owned_by                      Int?
  created_at                    DateTime                       @default(now()) @db.Timestamptz(3)
  created_by                    Int?
  updated_at                    DateTime                       @updatedAt() @db.Timestamptz(3)
  updated_by                    Int?
  deleted_at                    DateTime?                      @db.Timestamptz(3)
  deleted_by                    Int?
  description                   String?
  measure_type_id               Int
  measure_type                  MeasureType                    @relation(fields: [measure_type_id], references: [id])
  aggregate_function            String
  aggregate_function_parameters Json                           @db.JsonB()
  rollup_function               String?
  rollup_function_parameters    Json?                          @db.JsonB()
  accessors                     MeasureTypeAggregateAccessor[]
}

model MeasureTypeAggregateAccessor {
  id                           Int                  @id() @default(autoincrement())
  uid                          String?              @unique()
  name                         String               @unique()
  owned_by                     Int?
  created_at                   DateTime             @default(now()) @db.Timestamptz(3)
  created_by                   Int?
  updated_at                   DateTime             @updatedAt() @db.Timestamptz(3)
  updated_by                   Int?
  deleted_at                   DateTime?            @db.Timestamptz(3)
  deleted_by                   Int?
  description                  String?
  unit                         String?
  value_type                   String
  measure_type_aggregate_id    Int
  measure_type_aggregate       MeasureTypeAggregate @relation(fields: [measure_type_aggregate_id], references: [id])
  accessor_function            String
  accessor_function_parameters Json                 @db.JsonB()
}

model DefaultValueTypeAggregate {
  id                            Int                                 @id() @default(autoincrement())
  uid                           String?                             @unique()
  name                          String                              @unique()
  owned_by                      Int?
  created_at                    DateTime                            @default(now()) @db.Timestamptz(3)
  created_by                    Int?
  updated_at                    DateTime                            @updatedAt() @db.Timestamptz(3)
  updated_by                    Int?
  deleted_at                    DateTime?                           @db.Timestamptz(3)
  deleted_by                    Int?
  value_type                    String
  aggregate_function            String
  aggregate_function_parameters Json                                @db.JsonB()
  rollup_function               String?
  rollup_function_parameters    Json?                               @db.JsonB()
  accessors                     DefaultValueTypeAggregateAccessor[]
}

model DefaultValueTypeAggregateAccessor {
  id                              Int                       @id() @default(autoincrement())
  uid                             String?                   @unique()
  name                            String                    @unique()
  owned_by                        Int?
  created_at                      DateTime                  @default(now()) @db.Timestamptz(3)
  created_by                      Int?
  updated_at                      DateTime                  @updatedAt() @db.Timestamptz(3)
  updated_by                      Int?
  deleted_at                      DateTime?                 @db.Timestamptz(3)
  deleted_by                      Int?
  default_value_type_aggregate_id Int
  default_value_type_aggregate    DefaultValueTypeAggregate @relation(fields: [default_value_type_aggregate_id], references: [id])
  accessor_function               String
  accessor_function_parameters    Json                      @db.JsonB()
}

model SensorMeasureMapping {
  id              Int         @id() @default(autoincrement())
  is_index        Boolean
  sensor_type_id  Int
  sensor_type     SensorType  @relation(fields: [sensor_type_id], references: [id])
  measure_type_id Int
  measure_type    MeasureType @relation(fields: [measure_type_id], references: [id])

  @@unique([sensor_type_id, measure_type_id])
}

model Measure {
  timestamp       DateTime @default(now()) @db.Timestamptz(3)
  sensor_id       Int
  measure_type_id Int
  int_value       Int?
  float_value     Float?
  bool_value      Boolean?

  @@id([timestamp, sensor_id, measure_type_id])
}
