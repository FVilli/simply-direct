{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../src/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["/* eslint-disable prettier/prettier */\nimport { Socket } from 'socket.io';\nimport { MsgType } from './enums';\nimport { User } from './types';\n\nexport interface IError { message?:string; stack?:string; }\nexport interface ISocketSession { socket: Socket; clientId?: string; auth?: IAuth; subscriptions: ISubscriptions;}\nexport interface IEvent<T> { name: string; payload?: T; ts: Date; id: string; }\nexport interface IMessage<T> { topic: string; payload: T; _type?: MsgType; _id?: string; _dest?: string[]; _sender?: string; _rqst?: IMessage<any>;}\nexport interface IRequest<RQ, RS> { source: IMessage<RQ>; sendResponse: (response: IMessage<RS>, source: IRequest<RQ, RS>) => void; }\nexport interface IResponse<T> { data?: T; err?: string; status?: 'OK' | 'NO-AUTH'; }\nexport interface ISubscriptions {[idx:number]:string[]}\n\n// AUTH -----------------------------------------------------------------------------------------\nexport interface ILoginMsg { username: string; password: string; clientId: string; }\nexport interface ILogoutMsg { clientId: string; }\nexport interface IRefreshMsg { clientId: string; token: string; }\nexport interface IAuth { user: User; token: string; }\nexport interface IJwtPayload { username: string; sub: number; clientId: string; }\n"]}