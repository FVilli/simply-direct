{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"","sourcesContent":["import { EventType, MsgType } from './enums';\nimport { ISocketSession } from './interfaces';\n\nexport type User = {\n  name: string;\n  id: number;\n  uid: string | null;\n  owned_by: number | null;\n  created_at: Date;\n  created_by: number | null;\n  updated_at: Date\n  updated_by: number | null\n  deleted_at: Date | null\n  deleted_by: number | null\n  email: string | null\n  phash: string | null\n  role: string | null\n  disabled: boolean;\n}\n\nexport type Message<T> = {\n  topic: string;\n  payload: T;\n  _type?: MsgType;\n  _id?: string;\n  _dest?: string[];\n  _sender?: string;\n  _rqst?: Message<any>;\n};\nexport type Request<RQ, RS> = {\n  source: Message<RQ>;\n  sendResponse: (response: Message<RS>, source: Request<RQ, RS>) => void;\n};\nexport type Event = { _type: EventType; info?: any; session: ISocketSession };\n\n// export type Message<T> = { topic: string, payload: T, _type?: MsgType, _id?: string, _dest?: string, _sender?: string, _rqst?: Message<any> }\nexport type Response<T> = { data: T; err?: string };\n// export type Event = { _type: EventType; info?: any; }\n// export enum EventType { connect = \"connect\", disconnect = \"disconnect\", server = \"server\" }\n// export enum MsgType { msg = \"msg\", rqst = \"rqst\", rsp = \"rsp\", evt = \"evt\" }\n"]}